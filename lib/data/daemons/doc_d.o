#daemons/doc_d.c
function_docs (["add_save":(["/std/modules/save":"mark a variable as one that gets saved.",]),"newnews":(["/obj/nntp":"Send an nntp NEWNEWS command.",]),"add_history_item":(["/std/modules/shell_support/history":"add a history item to a history buffer.",]),"case_insensitive_complete":(["/std/modules/complete":"same as complete, but upper and lower case are ignored.",]),"complete":(["/std/modules/complete":"Given a string and a list of possible completions of that string, return an array of all strings that would be valid completions.",]),"get_module_doc":(["/daemons/doc_d":"returns the doc strings for all modules whoose name matches the passed argument.",]),"set_save_recurse":(["/std/modules/save":"sets whether or not a save is recursive.",]),"get_command_number":(["/std/modules/shell_support/history":"returns how many commands have been added to the history.",]),"call_out_chain":(["/secure/simul_efun/misc":"Does a call_out to a list of functions, one following another, with each returning the delay till the next one is called.",]),"add_alias":(["/std/modules/shell_support/alias":"Add an alias to an alias set.",]),"min":(["/secure/simul_efun/misc":"Returns the smallest element of an aggregate type (string, array, or mapping).",]),"call_remote":(["/std/modules/remote":"allows you to execute a call_other on a remote mud.",]),"eval_broadcast":(["/std/modules/remote":"will evaluate and return results from each remote mud.",]),"getopt":(["/std/modules/shell_support/getopt":"Takes an array and parses flags from it. Returns an array, the first element being a mapping of flag : value, the second element being an array of the remaining args, all flag information removed.  The second argument should be a string of single character flags that the command accepts, followed by a colon (:) if the flag can take an argument.",]),"set_history_buffer_size":(["/std/modules/shell_support/history":"sets the size of a history buffer.  -1 means no size limit.",]),"xhdr":(["/obj/nntp":"Send an nntp XHDR command.",]),"remove_alias":(["/std/modules/shell_support/alias":"Remove an alias from an alias set.",]),"get_saved":(["/std/modules/save":"returns the array of variables that get saved.",]),"exclude_array":(["/secure/simul_efun/misc":"returns a copy of arr with the range of elements sliced out.  Ie, the size of the array shrinks.  Eg: exclude_array( ({0,1,2,3}),1,2 )  => ({0,3})",]),"update_docs_of":(["/daemons/doc_d":"updates the doc strings for a given object.",]),"eval_remote":(["/std/modules/remote":"will evaluate and return a result from a remote mud.",]),"load_from_string":(["/std/modules/save":"loads an object from a string representation.",]),"save_to_string":(["/std/modules/save":"saves an object into a string representation.",]),"login_remote":(["/std/modules/remote":"logs a user into to a remote mud",]),"auth_eval":(["/std/modules/remote":"perform an authenticated/privileged evaluation (and result return) on a remote mud, carrying over the current (stack-based) privilege level.",]),"get_function_doc":(["/daemons/doc_d":"returns the doc strings for all functions whose name matches the passed argument.",]),"function_apropos":(["/daemons/doc_d":"returns a data structure with all functions that have anything to do with the string you give it.",]),"pattern_history_match":(["/std/modules/shell_support/history":"returns the most recently added history item that matches the regexp.  An implicit ^ is added to the beginning of the regexp.",]),"group":(["/obj/nntp":"Send an nntp GROUP command.",]),"pluralize":(["/std/modules/grammar":"convert a noun to it's plural form.  Oddly enough, it's also quitegood at converting verbs to their singular form, since going from plural to singular often entails adding an 's'.  Eg, they run, he runs.",]),"punctate":(["/std/modules/grammar":"adds a period to a sentence if needed.",]),"stat":(["/obj/nntp":"Send an nntp STAT command.",]),"head":(["/obj/nntp":"Send an nntp HEAD command.",]),"decompose":(["/secure/simul_efun/misc":"Takes any arrays that are elements in arr and merges all of its elements as elements of arr.  Eg, decompose(({1,({2,3,}),4})) will return: ({1,2,3,4}).  The algorithm is not recursive, so if any of the arrays have arrays in them, those arrays remain intact.  Eg, decompose( ({1,({({2,3}),4}),5}) )  returns:({1,({2,3}),4,5}). See flatten_array for a recursive version.",]),"argument_explode":(["/std/modules/shell_support/getopt":"assumes the arg passed is the argument to some unix-like command where ares are space seperated unless enclosed in non-escaped quotes. Returns an array of the arguments.",]),"article":(["/obj/nntp":"Send an nntp ARTICLE command.",]),"help":(["/obj/nntp":"Send an nntp HELP command.",]),"expand_alias":(["/std/modules/shell_support/alias":"Expand an argv with any aliases if applicable.",]),"newgroups":(["/obj/nntp":"Send an nntp NEWGROUPS command.",]),"setup_for_save":(["/std/modules/shell_support/shellfuncs":"Sets up M_SAVE to save some variables","/std/modules/shell_support/shellvars":"Sets up M_SAVE to save some variables","/std/modules/shell_support/alias":"Sets up M_SAVE to save some variables","/std/shell":"Sets up M_SAVE to save some variables",]),"choice":(["/secure/simul_efun/misc":"Returns a random element of the structure passed, if that structure is an aggregate type (i.e., A string, array or mapping).",]),"call_broadcast":(["/std/modules/remote":"allows you to execute a call_other on ALL other muds.",]),"flatten_array":(["/secure/simul_efun/misc":"Takes a array that may contain arrays, and reduces all arrays so that the result is a one dimensional array",]),"muds_available":(["/std/modules/remote":"returns information about the muds in the net, their connection status, and which this_user() has logged into.",]),"cmp":(["/secure/simul_efun/misc":"returns whether its two arguments are equivolent.  This is aboutthe same as using the equivolence operator (==), but will return truein cases where == does not, such as when comparing 2 empty arrays. Logically 2 empty arrays should be equivolent, but aren't with ==. cmp knows they are.  This is mainly useful when you want to compare mappings and arrays.",]),"max":(["/secure/simul_efun/misc":"Returns the largest element of a structure that is a string, array or mapping.",]),"ihave":(["/obj/nntp":"Send an nntp IHAVE command.",]),"is_logged_in":(["/std/modules/remote":"returns whether a particular user is logged into the specified mud.",]),"parse_argument":(["/std/modules/shell_support/getopt":"calls argument_explode() and then getopt(), returning the value of the getopt() call.",]),"quit":(["/obj/nntp":"Send an nntp QUIT command, and clean up.",]),"query_local_name":(["/std/modules/remote":"returns the 'name' of the local mud",]),"get_ordered_history":(["/std/modules/shell_support/history":"returns the history buffer in order of least to most recent items",]),"insert":(["/secure/simul_efun/misc":"Inserts the contents of the array of the first argument into The array in the second argument before the nth element of the array, where n is the 3rd argument passed to insert.",]),"get_nth_item":(["/std/modules/shell_support/history":"returns the nth command if it's still in the history buffer.",]),"slave":(["/obj/nntp":"Send an nntp SLAVE command.",]),"post":(["/obj/nntp":"Send an nntp POST command.",]),"body":(["/obj/nntp":"Send an nntp BODY command.",]),"clean_array":(["/secure/simul_efun/misc":"returns a version of the passed array with duplicate entries removed.  Eg, clean_array(({1,2,2}))  => ({1,2})",]),"last":(["/obj/nntp":"Send an nntp LAST command.",]),"eval":(["/secure/simul_efun/misc":"evaluates the string s as an LPC value.  Eg, if you have a string someonetyped in: \"({1,2,3,4})\"  eval returns the actual array ({1,2,3,4}).",]),"get_buffer_size":(["/std/modules/shell_support/history":"returns the size of a history buffer.",]),"len":(["/secure/simul_efun/misc":"returns the length of any aggregate type, be it the length of a string, the number of elements in an array, or the number of entries in a mapping. ",]),"list":(["/obj/nntp":"Send an nntp LIST command.",]),"next":(["/obj/nntp":"Send an nntp NEXT command.",]),"get_command_doc":(["/daemons/doc_d":"returns the doc strings for all commands whose name matches the passed argument.",]),"complete_user":(["/std/modules/complete":"given a username that might be partial, returns a user name, or an array of strings on a partial match, or 0 on no match.",]),"auth_call":(["/std/modules/remote":"perform an authenticated/privileged call to a remote mud, carrying over the current (stack-based) privilege level.",]),])
command_docs (["apropos":(["/cmds/wiz/":"Returns information on which mudlib functions contain the keyword passed, including a short description.",]),])
module_docs (["nntp":(["/obj/":"interface to an external nntp server.",]),"save":(["/std/modules/":"implements persistance.",]),"alias":(["/std/modules/shell_support/":"Implements generic alias handling code.",]),"doc_d":(["/daemons/":"The doc daemon is the central repository for documentation strings.",]),"remote":(["/std/modules/":"The remote module offers the call_remote() function for calling functions on other muds.",]),])
function_list ({})
