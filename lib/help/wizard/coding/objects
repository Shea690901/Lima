Here is the minimum required for a generic object:

#include <mudlib.h>

inherit OBJ;

create() {
  set_adjectives( ({ "dumb" }) );
  set_id( ({ "termimal", "computer" }) );
  set_long( "It looks like it has an IQ of about 30." ); }

the object will respond to the names "terminal", "dumb
terminal", "computer", and "dump computer", and when you look at
it you get a joke.

This object is very bland, completely useless, and can't even be
picked up.  Let's see how we can make things more interesting.

First, let's fool with the description.  When you look at the
room, you'll get a message like: "A dumb terminal lies here,
discarded."  First of all, notice that the game refers to an
object using the first adjective and the first noun.  This is
the default behavior.  It's also pretty smart about using
articles (a, the) but sometimes you want more power.  If you
call set_proper_name(), that will be used for the name of the object
instead.  For example, if you wanted to put the sword Excalibur
in the game, and you wanted the game to refer to it as
'Excalibur', 'You take a Excalibur' would be a bad thing.  so
you would do:

set_proper_name("Excalibur");

in create().  Note that you still have to call set_id and
set_adjectives so the game knows what the player can refer to
the sword as.  For example:

set_id( ({ "sword", "Excalibur" }) ); set_adjectives( ({ "King
Arthur's" }) );

Also, you can call set_unique(1) for objects that should always
be refered to as 'the' instead of 'a'.  If there could never be
two of the same object object in the same room, it probably
should be refered to as 'the'.

Now how do we affect how it looks in the room?  Try:

set_in_room_desc("A dumb terminal sits in the corner of the
room.\n");

This works well.  However, for objects that can be taken,
everytime you drop them they will go to the corner of the room.
This would be rather odd if you dropped it in a round room :)

The solution is to use set_untouched_desc.  That description
will only be used until the object is moved, so it can be used
to give a verbose description of where the object is situated in
the room.

Ok, it's pretty useless if you can't take anything.  How do you
make something takeable?  At the very top of the file, right
after #include <mudlib.h> insert the line:

inherit M_GETTABLE;
Like all the other M_* files, M_GETTABLE adds some functionality
to your object.  Now, your object has more control over what
happens when someone tries to take it.  In order to make it
gettable, you need to call:

set_gettable(1);

from create().  1 means that it is possible to get the object.
0 means give the standard error ("You can't get that!") and -1
mean that a special message will be given.  The message is set
like this:

set_getmsg("You don't want to get your hands near the dumb
terminal.");

There is also set_dropable() and set_dropmsg(), but objects
default to being dropable, so you don't have to call
set_dropable(1) from create().  They are used the same way.

What other M_* files can you use?  M_WEARABLE, M_OPENABLE,
M_LOCKABLE, and M_READABLE, to name a few.  Check the
appropriate documentation for details.

Do you want your object to give off light?  call set_light(1)
from create().  Also, if your object should have weight, call
set_weight(50).  1 weight unit corresponds roughly to a pound or
so.


Another way that the behavior of the object can be affected ...

--- this is as far as Beek has gotten

#include <setbit.h> set_flag(ATTACHED); set_flag(TRANSPARENT);
set_flag(FLAMING); set_flag(DESTROYABLE);


inherit CONTAINER set_max_capacity() can_put_in()
receive_object() release_object() set_objects() extra_receive()
can_take_from()
