$$ see: exits
FIRST:  WHAT YOU NEED:
1) all rooms must have the lines:
#include <mudlib.h>
inherit ROOM;
before any functions or variables are declared.
Coding rooms:

2) all rooms must contain the function create().
   This function is used to configure the room.
   The following things you _MUST_ do within the create() 
   function:
   a) the very first line in your create() function needs to be:
		room::create();
      the double colon means call the function create() in another
      file, the one you inherited, /std/room.c
   b) set_short("Round Room");
      or, whatever you want the short description of the 
      room to be.
   c) call set_long("This is a boring room."); or whatever

an example of the barest of bare rooms:

#include <mudlib.h>
inherit ROOM;

create(){
  room::create();
  set_short("Round Room");
  set_long("This is a round room.");
}

WHAT ELSE YOU SHOULD HAVE
This is simpler than the average room should be.  This example
has no exits, and nothing to look at, nothing to get.
You may, and are strongly encouraged to do the following
within the function create():

1) set_exits( (["north":"/wiz/rust/area/room1",
	"south" : "/wiz/rust/area/room2",
	"southeast" : "/wiz/rust/area/room3" ]) );

Note that more sophisticated things than just destinations can
be put in exits.  See "exits" for examples.

that format can be followed for as many or as few exits as you wish.
The direction goes in quotes before the colon, the file to which the exit
leaves goes in quotes after the colon.  

2) set_items(  ([ "table" : "It is a wooden table.\n",
	"chair" : "It is a plastic chair.\n"
			  "perhaps you can sit in it.\n",
	"lamp" : "It's like any other lava lamp you've ever seen\n"]));

This allows you to mimic the presence of items in your room.
in your long somewhere, we assume you have done:
output = output + "There is a table, chair and a lamp here.\n";
or something simmilar.  What items = ([ ...... ]); does,
is allow people to look at those items.
One caveat on items:  In order to add multiple names for a single item
you may use an array of strings as the item name.  Example:

  set_items( ([ ({ "tree", "trees" }) :
		"The trees look strong and healty.\n"]) );

This would expand into two separate item descriptions within the
room::create() function in /std/room.  So be sure to call ::create()
at the start of your create() function or the mud will not recognize your
items.

The mud will view them as psudo-objects without any special verbs attached to
them.

3)  set_objects( ([ "/wiz/rust/monsters/grue" : 1,
		"/wiz/rust/monsters/URgrue" : 2, ]) );

This allows you to make sure that a certain number of an object
are in your room every time the room resets, even if the room has
been looted or killed.
The above example will make sure my room has 1 grue and 2 ur-grues in
my room at every reset()


If you want the room to be light by default, instead of dark,
inside of create() you need the line:
set_light(1);

ADDING ADDITIONAL SPICE
to add aditional spice, to give the players something to do, use 
add_action(), like you can in other objects.  If you don't know how to code these,
please refer to 'help actions' 
(forthcoming.  For now, use 'help add_action', or ask someone)

// Beek --- add_action doesn't work.  Things are done entirely
differently now.  That should be documented soon as well.
