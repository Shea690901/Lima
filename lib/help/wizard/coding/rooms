First a few notes about rooms in general 

   1)  All rooms must have the following 2 lines before any
       functions or variables are declared:
  
         include <mudlib.h>
         inherit ROOM; 
  
   2)  All rooms must contain the function create().
       Within the create is where you configure your room.
       The following three items must be in your create function.

       a) The very first line in the create() function must be
   
             ::create();

          the double colon means call the create function in 
          the file you inherited (ROOM = /std/room.c).  This allows 
          your room to have default characteristics or you may
          change these characteristics as you will see later.
  
       b) set_brief("Round Room");
           
          This is the short description of the room.

       c) set_long("This is a boring room.");
   
          this is the long description of the room.  What you
          see when you enter the room or look in the room.

The following is an example of the barest of rooms:
  
include <mudlib.h>
inherit ROOM;

create()
{
    room::create();
    set_brief("ROund Room");
    set_long("This is a boring room.");
}


Your room is pretty much boring and uselss as it stands now.
This room has no exits, nothing to look at, nothing to get.
You are strongly encouraged to do the following with create();

set_exits( (["north":"/wiz/rust/area/room1",
             "south" : "/wiz/rust/area/room2",
             "southeast" : "/wiz/rust/area/room3" ]) );

    This will place the exits north, south and southeast into your
    room with the destinations as room1, room2, room3 respectively.

    Please note that this is not the only thing that can be done 
    with exits.  The LIMA mudlib has some very differant and 
    sophisticated things that can be done with exits.
    please see the help on "exits" for the detail and examples.

set_items( ([ "table" : "It is a wooden table.\n",
              "chair" : "It is a plastic chair.\n"
                        "perhaps you can sit on it.\n",
      "lamp" : "It's like any other lava lanp you've ever seen.\n" ]) );
     
   This function allows you to mimic the presence of items in the room.
   Especially useful for items that are scenery and nt really meant to
   be interacted with directly.  In your set_long() you need to let the
   player know this exist (i.e.  set_long(" .....  a table and chair..");
   
   If you wish to have multiple names for an object you may use an array
   
       set_items( ([ ({ "tree", "trees"}) : "The trees are strong.\n }) );
  
   This allows you to refer to trees or tree.
  
   Please note that you cannot interact with these items in any
   way other that looking at them.

set_objects( ([ "/wiz/rust/monters/grue" : 1,
                "/wiz/rust/monters/URgrue" : 2 ]) );

   This function allows you to make a certain number of objects 
   available in the room after each reset().
   The above example will make sure that there are 1 grue and 2
   ur-grues in the room after reset().

set_light()

    This function allows you to have your room be light by default 
    or dark.


PLEASE NOTE THAT THE LIMA MUDLIB MAKES NO USE OF ADD_ACTION().
TO ADD ADDITIONAL FUNCTIONALITY TO YOUR ROOMS YOU WILL USE 
VERBS PLEASE SEE THE APPROPRIATE HELP ON VERBS. 

